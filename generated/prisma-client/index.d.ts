// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  company: (where?: CompanyWhereInput) => Promise<boolean>;
  companyInvitation: (where?: CompanyInvitationWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
  itemImage: (where?: ItemImageWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  orderItem: (where?: OrderItemWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userInvitation: (where?: UserInvitationWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  company: (where: CompanyWhereUniqueInput) => CompanyNullablePromise;
  companies: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Company>;
  companiesConnection: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyConnectionPromise;
  companyInvitation: (
    where: CompanyInvitationWhereUniqueInput
  ) => CompanyInvitationNullablePromise;
  companyInvitations: (args?: {
    where?: CompanyInvitationWhereInput;
    orderBy?: CompanyInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CompanyInvitation>;
  companyInvitationsConnection: (args?: {
    where?: CompanyInvitationWhereInput;
    orderBy?: CompanyInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyInvitationConnectionPromise;
  item: (where: ItemWhereUniqueInput) => ItemNullablePromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  itemImage: (where: ItemImageWhereUniqueInput) => ItemImageNullablePromise;
  itemImages: (args?: {
    where?: ItemImageWhereInput;
    orderBy?: ItemImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ItemImage>;
  itemImagesConnection: (args?: {
    where?: ItemImageWhereInput;
    orderBy?: ItemImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemImageConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  orderItem: (where: OrderItemWhereUniqueInput) => OrderItemNullablePromise;
  orderItems: (args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrderItem>;
  orderItemsConnection: (args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderItemConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userInvitation: (
    where: UserInvitationWhereUniqueInput
  ) => UserInvitationNullablePromise;
  userInvitations: (args?: {
    where?: UserInvitationWhereInput;
    orderBy?: UserInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserInvitation>;
  userInvitationsConnection: (args?: {
    where?: UserInvitationWhereInput;
    orderBy?: UserInvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserInvitationConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCompany: (data: CompanyCreateInput) => CompanyPromise;
  updateCompany: (args: {
    data: CompanyUpdateInput;
    where: CompanyWhereUniqueInput;
  }) => CompanyPromise;
  updateManyCompanies: (args: {
    data: CompanyUpdateManyMutationInput;
    where?: CompanyWhereInput;
  }) => BatchPayloadPromise;
  upsertCompany: (args: {
    where: CompanyWhereUniqueInput;
    create: CompanyCreateInput;
    update: CompanyUpdateInput;
  }) => CompanyPromise;
  deleteCompany: (where: CompanyWhereUniqueInput) => CompanyPromise;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayloadPromise;
  createCompanyInvitation: (
    data: CompanyInvitationCreateInput
  ) => CompanyInvitationPromise;
  updateCompanyInvitation: (args: {
    data: CompanyInvitationUpdateInput;
    where: CompanyInvitationWhereUniqueInput;
  }) => CompanyInvitationPromise;
  updateManyCompanyInvitations: (args: {
    data: CompanyInvitationUpdateManyMutationInput;
    where?: CompanyInvitationWhereInput;
  }) => BatchPayloadPromise;
  upsertCompanyInvitation: (args: {
    where: CompanyInvitationWhereUniqueInput;
    create: CompanyInvitationCreateInput;
    update: CompanyInvitationUpdateInput;
  }) => CompanyInvitationPromise;
  deleteCompanyInvitation: (
    where: CompanyInvitationWhereUniqueInput
  ) => CompanyInvitationPromise;
  deleteManyCompanyInvitations: (
    where?: CompanyInvitationWhereInput
  ) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createItemImage: (data: ItemImageCreateInput) => ItemImagePromise;
  updateItemImage: (args: {
    data: ItemImageUpdateInput;
    where: ItemImageWhereUniqueInput;
  }) => ItemImagePromise;
  updateManyItemImages: (args: {
    data: ItemImageUpdateManyMutationInput;
    where?: ItemImageWhereInput;
  }) => BatchPayloadPromise;
  upsertItemImage: (args: {
    where: ItemImageWhereUniqueInput;
    create: ItemImageCreateInput;
    update: ItemImageUpdateInput;
  }) => ItemImagePromise;
  deleteItemImage: (where: ItemImageWhereUniqueInput) => ItemImagePromise;
  deleteManyItemImages: (where?: ItemImageWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createOrderItem: (data: OrderItemCreateInput) => OrderItemPromise;
  updateOrderItem: (args: {
    data: OrderItemUpdateInput;
    where: OrderItemWhereUniqueInput;
  }) => OrderItemPromise;
  updateManyOrderItems: (args: {
    data: OrderItemUpdateManyMutationInput;
    where?: OrderItemWhereInput;
  }) => BatchPayloadPromise;
  upsertOrderItem: (args: {
    where: OrderItemWhereUniqueInput;
    create: OrderItemCreateInput;
    update: OrderItemUpdateInput;
  }) => OrderItemPromise;
  deleteOrderItem: (where: OrderItemWhereUniqueInput) => OrderItemPromise;
  deleteManyOrderItems: (where?: OrderItemWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserInvitation: (
    data: UserInvitationCreateInput
  ) => UserInvitationPromise;
  updateUserInvitation: (args: {
    data: UserInvitationUpdateInput;
    where: UserInvitationWhereUniqueInput;
  }) => UserInvitationPromise;
  updateManyUserInvitations: (args: {
    data: UserInvitationUpdateManyMutationInput;
    where?: UserInvitationWhereInput;
  }) => BatchPayloadPromise;
  upsertUserInvitation: (args: {
    where: UserInvitationWhereUniqueInput;
    create: UserInvitationCreateInput;
    update: UserInvitationUpdateInput;
  }) => UserInvitationPromise;
  deleteUserInvitation: (
    where: UserInvitationWhereUniqueInput
  ) => UserInvitationPromise;
  deleteManyUserInvitations: (
    where?: UserInvitationWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
  companyInvitation: (
    where?: CompanyInvitationSubscriptionWhereInput
  ) => CompanyInvitationSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  itemImage: (
    where?: ItemImageSubscriptionWhereInput
  ) => ItemImageSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  orderItem: (
    where?: OrderItemSubscriptionWhereInput
  ) => OrderItemSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userInvitation: (
    where?: UserInvitationSubscriptionWhereInput
  ) => UserInvitationSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserRole = "APP_MODERATOR" | "COMPANY_ADMIN" | "COMPANY_MANAGER";

export type ItemStatus = "PRIVATE" | "PUBLIC";

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "sku_ASC"
  | "sku_DESC"
  | "price_ASC"
  | "price_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ItemImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "main_ASC"
  | "main_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC";

export type CompanyRole = "SUPPLIER" | "BUYER";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "country_ASC"
  | "country_DESC"
  | "city_ASC"
  | "city_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "verifyEmailToken_ASC"
  | "verifyEmailToken_DESC"
  | "verifiedEmail_ASC"
  | "verifiedEmail_DESC"
  | "verifiedPhone_ASC"
  | "verifiedPhone_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "lastSeen_ASC"
  | "lastSeen_DESC";

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "country_ASC"
  | "country_DESC"
  | "city_ASC"
  | "city_DESC"
  | "postalCode_ASC"
  | "postalCode_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CompanyInvitationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "inviteToken_ASC"
  | "inviteToken_DESC"
  | "sentTo_ASC"
  | "sentTo_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type OrderStatus =
  | "PENDING"
  | "PROCESSING"
  | "CANCELLED"
  | "DECLINED"
  | "COMPLETED";

export type OrderItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "sku_ASC"
  | "sku_DESC"
  | "price_ASC"
  | "price_DESC"
  | "quantity_ASC"
  | "quantity_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserInvitationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "inviteToken_ASC"
  | "inviteToken_DESC"
  | "sentTo_ASC"
  | "sentTo_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface ItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  sku?: Maybe<String>;
  sku_not?: Maybe<String>;
  sku_in?: Maybe<String[] | String>;
  sku_not_in?: Maybe<String[] | String>;
  sku_lt?: Maybe<String>;
  sku_lte?: Maybe<String>;
  sku_gt?: Maybe<String>;
  sku_gte?: Maybe<String>;
  sku_contains?: Maybe<String>;
  sku_not_contains?: Maybe<String>;
  sku_starts_with?: Maybe<String>;
  sku_not_starts_with?: Maybe<String>;
  sku_ends_with?: Maybe<String>;
  sku_not_ends_with?: Maybe<String>;
  image_every?: Maybe<ItemImageWhereInput>;
  image_some?: Maybe<ItemImageWhereInput>;
  image_none?: Maybe<ItemImageWhereInput>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  owner?: Maybe<CompanyWhereInput>;
  status?: Maybe<ItemStatus>;
  status_not?: Maybe<ItemStatus>;
  status_in?: Maybe<ItemStatus[] | ItemStatus>;
  status_not_in?: Maybe<ItemStatus[] | ItemStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  OR?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  NOT?: Maybe<ItemWhereInput[] | ItemWhereInput>;
}

export interface ItemImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  item?: Maybe<ItemWhereInput>;
  main?: Maybe<String>;
  main_not?: Maybe<String>;
  main_in?: Maybe<String[] | String>;
  main_not_in?: Maybe<String[] | String>;
  main_lt?: Maybe<String>;
  main_lte?: Maybe<String>;
  main_gt?: Maybe<String>;
  main_gte?: Maybe<String>;
  main_contains?: Maybe<String>;
  main_not_contains?: Maybe<String>;
  main_starts_with?: Maybe<String>;
  main_not_starts_with?: Maybe<String>;
  main_ends_with?: Maybe<String>;
  main_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  AND?: Maybe<ItemImageWhereInput[] | ItemImageWhereInput>;
  OR?: Maybe<ItemImageWhereInput[] | ItemImageWhereInput>;
  NOT?: Maybe<ItemImageWhereInput[] | ItemImageWhereInput>;
}

export interface CompanyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  postalCode?: Maybe<Int>;
  postalCode_not?: Maybe<Int>;
  postalCode_in?: Maybe<Int[] | Int>;
  postalCode_not_in?: Maybe<Int[] | Int>;
  postalCode_lt?: Maybe<Int>;
  postalCode_lte?: Maybe<Int>;
  postalCode_gt?: Maybe<Int>;
  postalCode_gte?: Maybe<Int>;
  members_every?: Maybe<UserWhereInput>;
  members_some?: Maybe<UserWhereInput>;
  members_none?: Maybe<UserWhereInput>;
  items_every?: Maybe<ItemWhereInput>;
  items_some?: Maybe<ItemWhereInput>;
  items_none?: Maybe<ItemWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  OR?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  NOT?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  company?: Maybe<CompanyWhereInput>;
  favoriteItems_every?: Maybe<ItemWhereInput>;
  favoriteItems_some?: Maybe<ItemWhereInput>;
  favoriteItems_none?: Maybe<ItemWhereInput>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  resetTokenExpiry_not?: Maybe<Float>;
  resetTokenExpiry_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_not_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_lt?: Maybe<Float>;
  resetTokenExpiry_lte?: Maybe<Float>;
  resetTokenExpiry_gt?: Maybe<Float>;
  resetTokenExpiry_gte?: Maybe<Float>;
  invitedBy?: Maybe<UserWhereInput>;
  verifyEmailToken?: Maybe<String>;
  verifyEmailToken_not?: Maybe<String>;
  verifyEmailToken_in?: Maybe<String[] | String>;
  verifyEmailToken_not_in?: Maybe<String[] | String>;
  verifyEmailToken_lt?: Maybe<String>;
  verifyEmailToken_lte?: Maybe<String>;
  verifyEmailToken_gt?: Maybe<String>;
  verifyEmailToken_gte?: Maybe<String>;
  verifyEmailToken_contains?: Maybe<String>;
  verifyEmailToken_not_contains?: Maybe<String>;
  verifyEmailToken_starts_with?: Maybe<String>;
  verifyEmailToken_not_starts_with?: Maybe<String>;
  verifyEmailToken_ends_with?: Maybe<String>;
  verifyEmailToken_not_ends_with?: Maybe<String>;
  verifiedEmail?: Maybe<Boolean>;
  verifiedEmail_not?: Maybe<Boolean>;
  verifiedPhone?: Maybe<Boolean>;
  verifiedPhone_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  lastSeen?: Maybe<DateTimeInput>;
  lastSeen_not?: Maybe<DateTimeInput>;
  lastSeen_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastSeen_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastSeen_lt?: Maybe<DateTimeInput>;
  lastSeen_lte?: Maybe<DateTimeInput>;
  lastSeen_gt?: Maybe<DateTimeInput>;
  lastSeen_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type CompanyInvitationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  inviteToken?: Maybe<String>;
}>;

export interface CompanyInvitationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  inviteToken?: Maybe<String>;
  inviteToken_not?: Maybe<String>;
  inviteToken_in?: Maybe<String[] | String>;
  inviteToken_not_in?: Maybe<String[] | String>;
  inviteToken_lt?: Maybe<String>;
  inviteToken_lte?: Maybe<String>;
  inviteToken_gt?: Maybe<String>;
  inviteToken_gte?: Maybe<String>;
  inviteToken_contains?: Maybe<String>;
  inviteToken_not_contains?: Maybe<String>;
  inviteToken_starts_with?: Maybe<String>;
  inviteToken_not_starts_with?: Maybe<String>;
  inviteToken_ends_with?: Maybe<String>;
  inviteToken_not_ends_with?: Maybe<String>;
  sentBy?: Maybe<CompanyWhereInput>;
  sentTo?: Maybe<String>;
  sentTo_not?: Maybe<String>;
  sentTo_in?: Maybe<String[] | String>;
  sentTo_not_in?: Maybe<String[] | String>;
  sentTo_lt?: Maybe<String>;
  sentTo_lte?: Maybe<String>;
  sentTo_gt?: Maybe<String>;
  sentTo_gte?: Maybe<String>;
  sentTo_contains?: Maybe<String>;
  sentTo_not_contains?: Maybe<String>;
  sentTo_starts_with?: Maybe<String>;
  sentTo_not_starts_with?: Maybe<String>;
  sentTo_ends_with?: Maybe<String>;
  sentTo_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CompanyInvitationWhereInput[] | CompanyInvitationWhereInput>;
  OR?: Maybe<CompanyInvitationWhereInput[] | CompanyInvitationWhereInput>;
  NOT?: Maybe<CompanyInvitationWhereInput[] | CompanyInvitationWhereInput>;
}

export type ItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ItemImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrderItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  sku?: Maybe<String>;
  sku_not?: Maybe<String>;
  sku_in?: Maybe<String[] | String>;
  sku_not_in?: Maybe<String[] | String>;
  sku_lt?: Maybe<String>;
  sku_lte?: Maybe<String>;
  sku_gt?: Maybe<String>;
  sku_gte?: Maybe<String>;
  sku_contains?: Maybe<String>;
  sku_not_contains?: Maybe<String>;
  sku_starts_with?: Maybe<String>;
  sku_not_starts_with?: Maybe<String>;
  sku_ends_with?: Maybe<String>;
  sku_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  owner?: Maybe<CompanyWhereInput>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
  OR?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
  NOT?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
}

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<OrderStatus>;
  status_not?: Maybe<OrderStatus>;
  status_in?: Maybe<OrderStatus[] | OrderStatus>;
  status_not_in?: Maybe<OrderStatus[] | OrderStatus>;
  items_every?: Maybe<OrderItemWhereInput>;
  items_some?: Maybe<OrderItemWhereInput>;
  items_none?: Maybe<OrderItemWhereInput>;
  supplier?: Maybe<CompanyWhereInput>;
  buyer?: Maybe<UserWhereInput>;
  totalPrice?: Maybe<Int>;
  totalPrice_not?: Maybe<Int>;
  totalPrice_in?: Maybe<Int[] | Int>;
  totalPrice_not_in?: Maybe<Int[] | Int>;
  totalPrice_lt?: Maybe<Int>;
  totalPrice_lte?: Maybe<Int>;
  totalPrice_gt?: Maybe<Int>;
  totalPrice_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export type OrderItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type UserInvitationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  inviteToken?: Maybe<String>;
}>;

export interface UserInvitationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  inviteToken?: Maybe<String>;
  inviteToken_not?: Maybe<String>;
  inviteToken_in?: Maybe<String[] | String>;
  inviteToken_not_in?: Maybe<String[] | String>;
  inviteToken_lt?: Maybe<String>;
  inviteToken_lte?: Maybe<String>;
  inviteToken_gt?: Maybe<String>;
  inviteToken_gte?: Maybe<String>;
  inviteToken_contains?: Maybe<String>;
  inviteToken_not_contains?: Maybe<String>;
  inviteToken_starts_with?: Maybe<String>;
  inviteToken_not_starts_with?: Maybe<String>;
  inviteToken_ends_with?: Maybe<String>;
  inviteToken_not_ends_with?: Maybe<String>;
  sentBy?: Maybe<UserWhereInput>;
  sentTo?: Maybe<String>;
  sentTo_not?: Maybe<String>;
  sentTo_in?: Maybe<String[] | String>;
  sentTo_not_in?: Maybe<String[] | String>;
  sentTo_lt?: Maybe<String>;
  sentTo_lte?: Maybe<String>;
  sentTo_gt?: Maybe<String>;
  sentTo_gte?: Maybe<String>;
  sentTo_contains?: Maybe<String>;
  sentTo_not_contains?: Maybe<String>;
  sentTo_starts_with?: Maybe<String>;
  sentTo_not_starts_with?: Maybe<String>;
  sentTo_ends_with?: Maybe<String>;
  sentTo_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserInvitationWhereInput[] | UserInvitationWhereInput>;
  OR?: Maybe<UserInvitationWhereInput[] | UserInvitationWhereInput>;
  NOT?: Maybe<UserInvitationWhereInput[] | UserInvitationWhereInput>;
}

export interface CompanyCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  name: String;
  companyRole?: Maybe<CompanyCreatecompanyRoleInput>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<Int>;
  members?: Maybe<UserCreateManyWithoutCompanyInput>;
  items?: Maybe<ItemCreateManyWithoutOwnerInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  firstName: String;
  lastName: String;
  role?: Maybe<UserCreateroleInput>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  company?: Maybe<CompanyCreateOneWithoutMembersInput>;
  favoriteItems?: Maybe<ItemCreateManyInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  invitedBy?: Maybe<UserCreateOneInput>;
  verifyEmailToken?: Maybe<String>;
  verifiedEmail?: Maybe<Boolean>;
  verifiedPhone?: Maybe<Boolean>;
  lastSeen?: Maybe<DateTimeInput>;
}

export interface UserCreateroleInput {
  set?: Maybe<UserRole[] | UserRole>;
}

export interface CompanyCreateOneWithoutMembersInput {
  create?: Maybe<CompanyCreateWithoutMembersInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  name: String;
  companyRole?: Maybe<CompanyCreatecompanyRoleInput>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<Int>;
  items?: Maybe<ItemCreateManyWithoutOwnerInput>;
}

export interface CompanyCreatecompanyRoleInput {
  set?: Maybe<CompanyRole[] | CompanyRole>;
}

export interface ItemCreateManyWithoutOwnerInput {
  create?: Maybe<ItemCreateWithoutOwnerInput[] | ItemCreateWithoutOwnerInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
}

export interface ItemCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  sku?: Maybe<String>;
  image?: Maybe<ItemImageCreateManyWithoutItemInput>;
  price: Int;
  status?: Maybe<ItemStatus>;
}

export interface ItemImageCreateManyWithoutItemInput {
  create?: Maybe<
    ItemImageCreateWithoutItemInput[] | ItemImageCreateWithoutItemInput
  >;
  connect?: Maybe<ItemImageWhereUniqueInput[] | ItemImageWhereUniqueInput>;
}

export interface ItemImageCreateWithoutItemInput {
  id?: Maybe<ID_Input>;
  main?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface ItemCreateManyInput {
  create?: Maybe<ItemCreateInput[] | ItemCreateInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
}

export interface ItemCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  sku?: Maybe<String>;
  image?: Maybe<ItemImageCreateManyWithoutItemInput>;
  price: Int;
  owner: CompanyCreateOneWithoutItemsInput;
  status?: Maybe<ItemStatus>;
}

export interface CompanyCreateOneWithoutItemsInput {
  create?: Maybe<CompanyCreateWithoutItemsInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  name: String;
  companyRole?: Maybe<CompanyCreatecompanyRoleInput>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<Int>;
  members?: Maybe<UserCreateManyWithoutCompanyInput>;
}

export interface UserCreateManyWithoutCompanyInput {
  create?: Maybe<
    UserCreateWithoutCompanyInput[] | UserCreateWithoutCompanyInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutCompanyInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  firstName: String;
  lastName: String;
  role?: Maybe<UserCreateroleInput>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  favoriteItems?: Maybe<ItemCreateManyInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  invitedBy?: Maybe<UserCreateOneInput>;
  verifyEmailToken?: Maybe<String>;
  verifiedEmail?: Maybe<Boolean>;
  verifiedPhone?: Maybe<Boolean>;
  lastSeen?: Maybe<DateTimeInput>;
}

export interface CompanyUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  name?: Maybe<String>;
  companyRole?: Maybe<CompanyUpdatecompanyRoleInput>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<Int>;
  members?: Maybe<UserUpdateManyWithoutCompanyInput>;
  items?: Maybe<ItemUpdateManyWithoutOwnerInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  role?: Maybe<UserUpdateroleInput>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  company?: Maybe<CompanyUpdateOneWithoutMembersInput>;
  favoriteItems?: Maybe<ItemUpdateManyInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  invitedBy?: Maybe<UserUpdateOneInput>;
  verifyEmailToken?: Maybe<String>;
  verifiedEmail?: Maybe<Boolean>;
  verifiedPhone?: Maybe<Boolean>;
  lastSeen?: Maybe<DateTimeInput>;
}

export interface UserUpdateroleInput {
  set?: Maybe<UserRole[] | UserRole>;
}

export interface CompanyUpdateOneWithoutMembersInput {
  create?: Maybe<CompanyCreateWithoutMembersInput>;
  update?: Maybe<CompanyUpdateWithoutMembersDataInput>;
  upsert?: Maybe<CompanyUpsertWithoutMembersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyUpdateWithoutMembersDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  name?: Maybe<String>;
  companyRole?: Maybe<CompanyUpdatecompanyRoleInput>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<Int>;
  items?: Maybe<ItemUpdateManyWithoutOwnerInput>;
}

export interface CompanyUpdatecompanyRoleInput {
  set?: Maybe<CompanyRole[] | CompanyRole>;
}

export interface ItemUpdateManyWithoutOwnerInput {
  create?: Maybe<ItemCreateWithoutOwnerInput[] | ItemCreateWithoutOwnerInput>;
  delete?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  set?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  disconnect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  update?: Maybe<
    | ItemUpdateWithWhereUniqueWithoutOwnerInput[]
    | ItemUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | ItemUpsertWithWhereUniqueWithoutOwnerInput[]
    | ItemUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  updateMany?: Maybe<
    ItemUpdateManyWithWhereNestedInput[] | ItemUpdateManyWithWhereNestedInput
  >;
}

export interface ItemUpdateWithWhereUniqueWithoutOwnerInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateWithoutOwnerDataInput;
}

export interface ItemUpdateWithoutOwnerDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  sku?: Maybe<String>;
  image?: Maybe<ItemImageUpdateManyWithoutItemInput>;
  price?: Maybe<Int>;
  status?: Maybe<ItemStatus>;
}

export interface ItemImageUpdateManyWithoutItemInput {
  create?: Maybe<
    ItemImageCreateWithoutItemInput[] | ItemImageCreateWithoutItemInput
  >;
  delete?: Maybe<ItemImageWhereUniqueInput[] | ItemImageWhereUniqueInput>;
  connect?: Maybe<ItemImageWhereUniqueInput[] | ItemImageWhereUniqueInput>;
  set?: Maybe<ItemImageWhereUniqueInput[] | ItemImageWhereUniqueInput>;
  disconnect?: Maybe<ItemImageWhereUniqueInput[] | ItemImageWhereUniqueInput>;
  update?: Maybe<
    | ItemImageUpdateWithWhereUniqueWithoutItemInput[]
    | ItemImageUpdateWithWhereUniqueWithoutItemInput
  >;
  upsert?: Maybe<
    | ItemImageUpsertWithWhereUniqueWithoutItemInput[]
    | ItemImageUpsertWithWhereUniqueWithoutItemInput
  >;
  deleteMany?: Maybe<ItemImageScalarWhereInput[] | ItemImageScalarWhereInput>;
  updateMany?: Maybe<
    | ItemImageUpdateManyWithWhereNestedInput[]
    | ItemImageUpdateManyWithWhereNestedInput
  >;
}

export interface ItemImageUpdateWithWhereUniqueWithoutItemInput {
  where: ItemImageWhereUniqueInput;
  data: ItemImageUpdateWithoutItemDataInput;
}

export interface ItemImageUpdateWithoutItemDataInput {
  main?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface ItemImageUpsertWithWhereUniqueWithoutItemInput {
  where: ItemImageWhereUniqueInput;
  update: ItemImageUpdateWithoutItemDataInput;
  create: ItemImageCreateWithoutItemInput;
}

export interface ItemImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  main?: Maybe<String>;
  main_not?: Maybe<String>;
  main_in?: Maybe<String[] | String>;
  main_not_in?: Maybe<String[] | String>;
  main_lt?: Maybe<String>;
  main_lte?: Maybe<String>;
  main_gt?: Maybe<String>;
  main_gte?: Maybe<String>;
  main_contains?: Maybe<String>;
  main_not_contains?: Maybe<String>;
  main_starts_with?: Maybe<String>;
  main_not_starts_with?: Maybe<String>;
  main_ends_with?: Maybe<String>;
  main_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  AND?: Maybe<ItemImageScalarWhereInput[] | ItemImageScalarWhereInput>;
  OR?: Maybe<ItemImageScalarWhereInput[] | ItemImageScalarWhereInput>;
  NOT?: Maybe<ItemImageScalarWhereInput[] | ItemImageScalarWhereInput>;
}

export interface ItemImageUpdateManyWithWhereNestedInput {
  where: ItemImageScalarWhereInput;
  data: ItemImageUpdateManyDataInput;
}

export interface ItemImageUpdateManyDataInput {
  main?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface ItemUpsertWithWhereUniqueWithoutOwnerInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateWithoutOwnerDataInput;
  create: ItemCreateWithoutOwnerInput;
}

export interface ItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  sku?: Maybe<String>;
  sku_not?: Maybe<String>;
  sku_in?: Maybe<String[] | String>;
  sku_not_in?: Maybe<String[] | String>;
  sku_lt?: Maybe<String>;
  sku_lte?: Maybe<String>;
  sku_gt?: Maybe<String>;
  sku_gte?: Maybe<String>;
  sku_contains?: Maybe<String>;
  sku_not_contains?: Maybe<String>;
  sku_starts_with?: Maybe<String>;
  sku_not_starts_with?: Maybe<String>;
  sku_ends_with?: Maybe<String>;
  sku_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  status?: Maybe<ItemStatus>;
  status_not?: Maybe<ItemStatus>;
  status_in?: Maybe<ItemStatus[] | ItemStatus>;
  status_not_in?: Maybe<ItemStatus[] | ItemStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  OR?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  NOT?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
}

export interface ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput;
  data: ItemUpdateManyDataInput;
}

export interface ItemUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  sku?: Maybe<String>;
  price?: Maybe<Int>;
  status?: Maybe<ItemStatus>;
}

export interface CompanyUpsertWithoutMembersInput {
  update: CompanyUpdateWithoutMembersDataInput;
  create: CompanyCreateWithoutMembersInput;
}

export interface ItemUpdateManyInput {
  create?: Maybe<ItemCreateInput[] | ItemCreateInput>;
  update?: Maybe<
    | ItemUpdateWithWhereUniqueNestedInput[]
    | ItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ItemUpsertWithWhereUniqueNestedInput[]
    | ItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  set?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  disconnect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  deleteMany?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  updateMany?: Maybe<
    ItemUpdateManyWithWhereNestedInput[] | ItemUpdateManyWithWhereNestedInput
  >;
}

export interface ItemUpdateWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateDataInput;
}

export interface ItemUpdateDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  sku?: Maybe<String>;
  image?: Maybe<ItemImageUpdateManyWithoutItemInput>;
  price?: Maybe<Int>;
  owner?: Maybe<CompanyUpdateOneRequiredWithoutItemsInput>;
  status?: Maybe<ItemStatus>;
}

export interface CompanyUpdateOneRequiredWithoutItemsInput {
  create?: Maybe<CompanyCreateWithoutItemsInput>;
  update?: Maybe<CompanyUpdateWithoutItemsDataInput>;
  upsert?: Maybe<CompanyUpsertWithoutItemsInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyUpdateWithoutItemsDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  name?: Maybe<String>;
  companyRole?: Maybe<CompanyUpdatecompanyRoleInput>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<Int>;
  members?: Maybe<UserUpdateManyWithoutCompanyInput>;
}

export interface UserUpdateManyWithoutCompanyInput {
  create?: Maybe<
    UserCreateWithoutCompanyInput[] | UserCreateWithoutCompanyInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    | UserUpdateWithWhereUniqueWithoutCompanyInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    | UserUpsertWithWhereUniqueWithoutCompanyInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCompanyDataInput;
}

export interface UserUpdateWithoutCompanyDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  role?: Maybe<UserUpdateroleInput>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  favoriteItems?: Maybe<ItemUpdateManyInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  invitedBy?: Maybe<UserUpdateOneInput>;
  verifyEmailToken?: Maybe<String>;
  verifiedEmail?: Maybe<Boolean>;
  verifiedPhone?: Maybe<Boolean>;
  lastSeen?: Maybe<DateTimeInput>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCompanyDataInput;
  create: UserCreateWithoutCompanyInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  resetTokenExpiry_not?: Maybe<Float>;
  resetTokenExpiry_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_not_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_lt?: Maybe<Float>;
  resetTokenExpiry_lte?: Maybe<Float>;
  resetTokenExpiry_gt?: Maybe<Float>;
  resetTokenExpiry_gte?: Maybe<Float>;
  verifyEmailToken?: Maybe<String>;
  verifyEmailToken_not?: Maybe<String>;
  verifyEmailToken_in?: Maybe<String[] | String>;
  verifyEmailToken_not_in?: Maybe<String[] | String>;
  verifyEmailToken_lt?: Maybe<String>;
  verifyEmailToken_lte?: Maybe<String>;
  verifyEmailToken_gt?: Maybe<String>;
  verifyEmailToken_gte?: Maybe<String>;
  verifyEmailToken_contains?: Maybe<String>;
  verifyEmailToken_not_contains?: Maybe<String>;
  verifyEmailToken_starts_with?: Maybe<String>;
  verifyEmailToken_not_starts_with?: Maybe<String>;
  verifyEmailToken_ends_with?: Maybe<String>;
  verifyEmailToken_not_ends_with?: Maybe<String>;
  verifiedEmail?: Maybe<Boolean>;
  verifiedEmail_not?: Maybe<Boolean>;
  verifiedPhone?: Maybe<Boolean>;
  verifiedPhone_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  lastSeen?: Maybe<DateTimeInput>;
  lastSeen_not?: Maybe<DateTimeInput>;
  lastSeen_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastSeen_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastSeen_lt?: Maybe<DateTimeInput>;
  lastSeen_lte?: Maybe<DateTimeInput>;
  lastSeen_gt?: Maybe<DateTimeInput>;
  lastSeen_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  role?: Maybe<UserUpdateroleInput>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  verifyEmailToken?: Maybe<String>;
  verifiedEmail?: Maybe<Boolean>;
  verifiedPhone?: Maybe<Boolean>;
  lastSeen?: Maybe<DateTimeInput>;
}

export interface CompanyUpsertWithoutItemsInput {
  update: CompanyUpdateWithoutItemsDataInput;
  create: CompanyCreateWithoutItemsInput;
}

export interface ItemUpsertWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateDataInput;
  create: ItemCreateInput;
}

export interface CompanyUpdateManyMutationInput {
  name?: Maybe<String>;
  companyRole?: Maybe<CompanyUpdatecompanyRoleInput>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<Int>;
}

export interface CompanyInvitationCreateInput {
  id?: Maybe<ID_Input>;
  inviteToken?: Maybe<String>;
  sentBy: CompanyCreateOneInput;
  sentTo: String;
}

export interface CompanyCreateOneInput {
  create?: Maybe<CompanyCreateInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyInvitationUpdateInput {
  inviteToken?: Maybe<String>;
  sentBy?: Maybe<CompanyUpdateOneRequiredInput>;
  sentTo?: Maybe<String>;
}

export interface CompanyUpdateOneRequiredInput {
  create?: Maybe<CompanyCreateInput>;
  update?: Maybe<CompanyUpdateDataInput>;
  upsert?: Maybe<CompanyUpsertNestedInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyUpdateDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  name?: Maybe<String>;
  companyRole?: Maybe<CompanyUpdatecompanyRoleInput>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  postalCode?: Maybe<Int>;
  members?: Maybe<UserUpdateManyWithoutCompanyInput>;
  items?: Maybe<ItemUpdateManyWithoutOwnerInput>;
}

export interface CompanyUpsertNestedInput {
  update: CompanyUpdateDataInput;
  create: CompanyCreateInput;
}

export interface CompanyInvitationUpdateManyMutationInput {
  inviteToken?: Maybe<String>;
  sentTo?: Maybe<String>;
}

export interface ItemUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  sku?: Maybe<String>;
  image?: Maybe<ItemImageUpdateManyWithoutItemInput>;
  price?: Maybe<Int>;
  owner?: Maybe<CompanyUpdateOneRequiredWithoutItemsInput>;
  status?: Maybe<ItemStatus>;
}

export interface ItemUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  sku?: Maybe<String>;
  price?: Maybe<Int>;
  status?: Maybe<ItemStatus>;
}

export interface ItemImageCreateInput {
  id?: Maybe<ID_Input>;
  item: ItemCreateOneWithoutImageInput;
  main?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface ItemCreateOneWithoutImageInput {
  create?: Maybe<ItemCreateWithoutImageInput>;
  connect?: Maybe<ItemWhereUniqueInput>;
}

export interface ItemCreateWithoutImageInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  sku?: Maybe<String>;
  price: Int;
  owner: CompanyCreateOneWithoutItemsInput;
  status?: Maybe<ItemStatus>;
}

export interface ItemImageUpdateInput {
  item?: Maybe<ItemUpdateOneRequiredWithoutImageInput>;
  main?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface ItemUpdateOneRequiredWithoutImageInput {
  create?: Maybe<ItemCreateWithoutImageInput>;
  update?: Maybe<ItemUpdateWithoutImageDataInput>;
  upsert?: Maybe<ItemUpsertWithoutImageInput>;
  connect?: Maybe<ItemWhereUniqueInput>;
}

export interface ItemUpdateWithoutImageDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  sku?: Maybe<String>;
  price?: Maybe<Int>;
  owner?: Maybe<CompanyUpdateOneRequiredWithoutItemsInput>;
  status?: Maybe<ItemStatus>;
}

export interface ItemUpsertWithoutImageInput {
  update: ItemUpdateWithoutImageDataInput;
  create: ItemCreateWithoutImageInput;
}

export interface ItemImageUpdateManyMutationInput {
  main?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface OrderCreateInput {
  id?: Maybe<ID_Input>;
  status: OrderStatus;
  items?: Maybe<OrderItemCreateManyInput>;
  supplier: CompanyCreateOneInput;
  buyer: UserCreateOneInput;
  totalPrice: Int;
}

export interface OrderItemCreateManyInput {
  create?: Maybe<OrderItemCreateInput[] | OrderItemCreateInput>;
  connect?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
}

export interface OrderItemCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  sku?: Maybe<String>;
  price: Int;
  owner: CompanyCreateOneInput;
  quantity?: Maybe<Int>;
}

export interface OrderUpdateInput {
  status?: Maybe<OrderStatus>;
  items?: Maybe<OrderItemUpdateManyInput>;
  supplier?: Maybe<CompanyUpdateOneRequiredInput>;
  buyer?: Maybe<UserUpdateOneRequiredInput>;
  totalPrice?: Maybe<Int>;
}

export interface OrderItemUpdateManyInput {
  create?: Maybe<OrderItemCreateInput[] | OrderItemCreateInput>;
  update?: Maybe<
    | OrderItemUpdateWithWhereUniqueNestedInput[]
    | OrderItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | OrderItemUpsertWithWhereUniqueNestedInput[]
    | OrderItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  connect?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  set?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  disconnect?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  deleteMany?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  updateMany?: Maybe<
    | OrderItemUpdateManyWithWhereNestedInput[]
    | OrderItemUpdateManyWithWhereNestedInput
  >;
}

export interface OrderItemUpdateWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput;
  data: OrderItemUpdateDataInput;
}

export interface OrderItemUpdateDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  sku?: Maybe<String>;
  price?: Maybe<Int>;
  owner?: Maybe<CompanyUpdateOneRequiredInput>;
  quantity?: Maybe<Int>;
}

export interface OrderItemUpsertWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput;
  update: OrderItemUpdateDataInput;
  create: OrderItemCreateInput;
}

export interface OrderItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  sku?: Maybe<String>;
  sku_not?: Maybe<String>;
  sku_in?: Maybe<String[] | String>;
  sku_not_in?: Maybe<String[] | String>;
  sku_lt?: Maybe<String>;
  sku_lte?: Maybe<String>;
  sku_gt?: Maybe<String>;
  sku_gte?: Maybe<String>;
  sku_contains?: Maybe<String>;
  sku_not_contains?: Maybe<String>;
  sku_starts_with?: Maybe<String>;
  sku_not_starts_with?: Maybe<String>;
  sku_ends_with?: Maybe<String>;
  sku_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  OR?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  NOT?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
}

export interface OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput;
  data: OrderItemUpdateManyDataInput;
}

export interface OrderItemUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  sku?: Maybe<String>;
  price?: Maybe<Int>;
  quantity?: Maybe<Int>;
}

export interface OrderUpdateManyMutationInput {
  status?: Maybe<OrderStatus>;
  totalPrice?: Maybe<Int>;
}

export interface OrderItemUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  sku?: Maybe<String>;
  price?: Maybe<Int>;
  owner?: Maybe<CompanyUpdateOneRequiredInput>;
  quantity?: Maybe<Int>;
}

export interface OrderItemUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  sku?: Maybe<String>;
  price?: Maybe<Int>;
  quantity?: Maybe<Int>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  role?: Maybe<UserUpdateroleInput>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  company?: Maybe<CompanyUpdateOneWithoutMembersInput>;
  favoriteItems?: Maybe<ItemUpdateManyInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  invitedBy?: Maybe<UserUpdateOneInput>;
  verifyEmailToken?: Maybe<String>;
  verifiedEmail?: Maybe<Boolean>;
  verifiedPhone?: Maybe<Boolean>;
  lastSeen?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  role?: Maybe<UserUpdateroleInput>;
  phone?: Maybe<String>;
  country?: Maybe<String>;
  city?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  verifyEmailToken?: Maybe<String>;
  verifiedEmail?: Maybe<Boolean>;
  verifiedPhone?: Maybe<Boolean>;
  lastSeen?: Maybe<DateTimeInput>;
}

export interface UserInvitationCreateInput {
  id?: Maybe<ID_Input>;
  inviteToken?: Maybe<String>;
  sentBy: UserCreateOneInput;
  sentTo: String;
}

export interface UserInvitationUpdateInput {
  inviteToken?: Maybe<String>;
  sentBy?: Maybe<UserUpdateOneRequiredInput>;
  sentTo?: Maybe<String>;
}

export interface UserInvitationUpdateManyMutationInput {
  inviteToken?: Maybe<String>;
  sentTo?: Maybe<String>;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CompanyWhereInput>;
  AND?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  OR?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  NOT?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
}

export interface CompanyInvitationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CompanyInvitationWhereInput>;
  AND?: Maybe<
    | CompanyInvitationSubscriptionWhereInput[]
    | CompanyInvitationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | CompanyInvitationSubscriptionWhereInput[]
    | CompanyInvitationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | CompanyInvitationSubscriptionWhereInput[]
    | CompanyInvitationSubscriptionWhereInput
  >;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemWhereInput>;
  AND?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  OR?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  NOT?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
}

export interface ItemImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemImageWhereInput>;
  AND?: Maybe<
    ItemImageSubscriptionWhereInput[] | ItemImageSubscriptionWhereInput
  >;
  OR?: Maybe<
    ItemImageSubscriptionWhereInput[] | ItemImageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ItemImageSubscriptionWhereInput[] | ItemImageSubscriptionWhereInput
  >;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface OrderItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderItemWhereInput>;
  AND?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserInvitationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserInvitationWhereInput>;
  AND?: Maybe<
    | UserInvitationSubscriptionWhereInput[]
    | UserInvitationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | UserInvitationSubscriptionWhereInput[]
    | UserInvitationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | UserInvitationSubscriptionWhereInput[]
    | UserInvitationSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Company {
  id: ID_Output;
  name: String;
  companyRole: CompanyRole[];
  country?: String;
  city?: String;
  postalCode?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CompanyPromise extends Promise<Company>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  companyRole: () => Promise<CompanyRole[]>;
  country: () => Promise<String>;
  city: () => Promise<String>;
  postalCode: () => Promise<Int>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<Company>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  companyRole: () => Promise<AsyncIterator<CompanyRole[]>>;
  country: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<Int>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CompanyNullablePromise
  extends Promise<Company | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  name: () => Promise<String>;
  companyRole: () => Promise<CompanyRole[]>;
  country: () => Promise<String>;
  city: () => Promise<String>;
  postalCode: () => Promise<Int>;
  members: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  firstName: String;
  lastName: String;
  role: UserRole[];
  phone?: String;
  country?: String;
  city?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  verifyEmailToken?: String;
  verifiedEmail: Boolean;
  verifiedPhone: Boolean;
  createdAt: DateTimeOutput;
  lastSeen?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  role: () => Promise<UserRole[]>;
  phone: () => Promise<String>;
  country: () => Promise<String>;
  city: () => Promise<String>;
  company: <T = CompanyPromise>() => T;
  favoriteItems: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  invitedBy: <T = UserPromise>() => T;
  verifyEmailToken: () => Promise<String>;
  verifiedEmail: () => Promise<Boolean>;
  verifiedPhone: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  lastSeen: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole[]>>;
  phone: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  company: <T = CompanySubscription>() => T;
  favoriteItems: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  invitedBy: <T = UserSubscription>() => T;
  verifyEmailToken: () => Promise<AsyncIterator<String>>;
  verifiedEmail: () => Promise<AsyncIterator<Boolean>>;
  verifiedPhone: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastSeen: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  role: () => Promise<UserRole[]>;
  phone: () => Promise<String>;
  country: () => Promise<String>;
  city: () => Promise<String>;
  company: <T = CompanyPromise>() => T;
  favoriteItems: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  invitedBy: <T = UserPromise>() => T;
  verifyEmailToken: () => Promise<String>;
  verifiedEmail: () => Promise<Boolean>;
  verifiedPhone: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  lastSeen: () => Promise<DateTimeOutput>;
}

export interface Item {
  id: ID_Output;
  title: String;
  description: String;
  sku?: String;
  price: Int;
  status: ItemStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  sku: () => Promise<String>;
  image: <T = FragmentableArray<ItemImage>>(args?: {
    where?: ItemImageWhereInput;
    orderBy?: ItemImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  price: () => Promise<Int>;
  owner: <T = CompanyPromise>() => T;
  status: () => Promise<ItemStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  sku: () => Promise<AsyncIterator<String>>;
  image: <T = Promise<AsyncIterator<ItemImageSubscription>>>(args?: {
    where?: ItemImageWhereInput;
    orderBy?: ItemImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  price: () => Promise<AsyncIterator<Int>>;
  owner: <T = CompanySubscription>() => T;
  status: () => Promise<AsyncIterator<ItemStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ItemNullablePromise
  extends Promise<Item | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  sku: () => Promise<String>;
  image: <T = FragmentableArray<ItemImage>>(args?: {
    where?: ItemImageWhereInput;
    orderBy?: ItemImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  price: () => Promise<Int>;
  owner: <T = CompanyPromise>() => T;
  status: () => Promise<ItemStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ItemImage {
  id: ID_Output;
  main?: String;
  thumbnail?: String;
}

export interface ItemImagePromise extends Promise<ItemImage>, Fragmentable {
  id: () => Promise<ID_Output>;
  item: <T = ItemPromise>() => T;
  main: () => Promise<String>;
  thumbnail: () => Promise<String>;
}

export interface ItemImageSubscription
  extends Promise<AsyncIterator<ItemImage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  item: <T = ItemSubscription>() => T;
  main: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
}

export interface ItemImageNullablePromise
  extends Promise<ItemImage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  item: <T = ItemPromise>() => T;
  main: () => Promise<String>;
  thumbnail: () => Promise<String>;
}

export interface CompanyConnection {
  pageInfo: PageInfo;
  edges: CompanyEdge[];
}

export interface CompanyConnectionPromise
  extends Promise<CompanyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyEdge>>() => T;
  aggregate: <T = AggregateCompanyPromise>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CompanyEdge {
  node: Company;
  cursor: String;
}

export interface CompanyEdgePromise extends Promise<CompanyEdge>, Fragmentable {
  node: <T = CompanyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdge>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompany {
  count: Int;
}

export interface AggregateCompanyPromise
  extends Promise<AggregateCompany>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompany>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyInvitation {
  id: ID_Output;
  inviteToken?: String;
  sentTo: String;
  createdAt: DateTimeOutput;
}

export interface CompanyInvitationPromise
  extends Promise<CompanyInvitation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  inviteToken: () => Promise<String>;
  sentBy: <T = CompanyPromise>() => T;
  sentTo: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CompanyInvitationSubscription
  extends Promise<AsyncIterator<CompanyInvitation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  inviteToken: () => Promise<AsyncIterator<String>>;
  sentBy: <T = CompanySubscription>() => T;
  sentTo: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CompanyInvitationNullablePromise
  extends Promise<CompanyInvitation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  inviteToken: () => Promise<String>;
  sentBy: <T = CompanyPromise>() => T;
  sentTo: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CompanyInvitationConnection {
  pageInfo: PageInfo;
  edges: CompanyInvitationEdge[];
}

export interface CompanyInvitationConnectionPromise
  extends Promise<CompanyInvitationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyInvitationEdge>>() => T;
  aggregate: <T = AggregateCompanyInvitationPromise>() => T;
}

export interface CompanyInvitationConnectionSubscription
  extends Promise<AsyncIterator<CompanyInvitationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyInvitationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanyInvitationSubscription>() => T;
}

export interface CompanyInvitationEdge {
  node: CompanyInvitation;
  cursor: String;
}

export interface CompanyInvitationEdgePromise
  extends Promise<CompanyInvitationEdge>,
    Fragmentable {
  node: <T = CompanyInvitationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyInvitationEdgeSubscription
  extends Promise<AsyncIterator<CompanyInvitationEdge>>,
    Fragmentable {
  node: <T = CompanyInvitationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompanyInvitation {
  count: Int;
}

export interface AggregateCompanyInvitationPromise
  extends Promise<AggregateCompanyInvitation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanyInvitationSubscription
  extends Promise<AsyncIterator<AggregateCompanyInvitation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemImageConnection {
  pageInfo: PageInfo;
  edges: ItemImageEdge[];
}

export interface ItemImageConnectionPromise
  extends Promise<ItemImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemImageEdge>>() => T;
  aggregate: <T = AggregateItemImagePromise>() => T;
}

export interface ItemImageConnectionSubscription
  extends Promise<AsyncIterator<ItemImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemImageSubscription>() => T;
}

export interface ItemImageEdge {
  node: ItemImage;
  cursor: String;
}

export interface ItemImageEdgePromise
  extends Promise<ItemImageEdge>,
    Fragmentable {
  node: <T = ItemImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemImageEdgeSubscription
  extends Promise<AsyncIterator<ItemImageEdge>>,
    Fragmentable {
  node: <T = ItemImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItemImage {
  count: Int;
}

export interface AggregateItemImagePromise
  extends Promise<AggregateItemImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemImageSubscription
  extends Promise<AsyncIterator<AggregateItemImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Order {
  id: ID_Output;
  status: OrderStatus;
  totalPrice: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<OrderStatus>;
  items: <T = FragmentableArray<OrderItem>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  supplier: <T = CompanyPromise>() => T;
  buyer: <T = UserPromise>() => T;
  totalPrice: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<OrderStatus>>;
  items: <T = Promise<AsyncIterator<OrderItemSubscription>>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  supplier: <T = CompanySubscription>() => T;
  buyer: <T = UserSubscription>() => T;
  totalPrice: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<OrderStatus>;
  items: <T = FragmentableArray<OrderItem>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  supplier: <T = CompanyPromise>() => T;
  buyer: <T = UserPromise>() => T;
  totalPrice: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderItem {
  id: ID_Output;
  title: String;
  description: String;
  sku?: String;
  price: Int;
  quantity: Int;
}

export interface OrderItemPromise extends Promise<OrderItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  sku: () => Promise<String>;
  price: () => Promise<Int>;
  owner: <T = CompanyPromise>() => T;
  quantity: () => Promise<Int>;
}

export interface OrderItemSubscription
  extends Promise<AsyncIterator<OrderItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  sku: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  owner: <T = CompanySubscription>() => T;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface OrderItemNullablePromise
  extends Promise<OrderItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  sku: () => Promise<String>;
  price: () => Promise<Int>;
  owner: <T = CompanyPromise>() => T;
  quantity: () => Promise<Int>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderItemConnection {
  pageInfo: PageInfo;
  edges: OrderItemEdge[];
}

export interface OrderItemConnectionPromise
  extends Promise<OrderItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderItemEdge>>() => T;
  aggregate: <T = AggregateOrderItemPromise>() => T;
}

export interface OrderItemConnectionSubscription
  extends Promise<AsyncIterator<OrderItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderItemSubscription>() => T;
}

export interface OrderItemEdge {
  node: OrderItem;
  cursor: String;
}

export interface OrderItemEdgePromise
  extends Promise<OrderItemEdge>,
    Fragmentable {
  node: <T = OrderItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderItemEdgeSubscription
  extends Promise<AsyncIterator<OrderItemEdge>>,
    Fragmentable {
  node: <T = OrderItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrderItem {
  count: Int;
}

export interface AggregateOrderItemPromise
  extends Promise<AggregateOrderItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderItemSubscription
  extends Promise<AsyncIterator<AggregateOrderItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserInvitation {
  id: ID_Output;
  inviteToken?: String;
  sentTo: String;
  createdAt: DateTimeOutput;
}

export interface UserInvitationPromise
  extends Promise<UserInvitation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  inviteToken: () => Promise<String>;
  sentBy: <T = UserPromise>() => T;
  sentTo: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserInvitationSubscription
  extends Promise<AsyncIterator<UserInvitation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  inviteToken: () => Promise<AsyncIterator<String>>;
  sentBy: <T = UserSubscription>() => T;
  sentTo: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserInvitationNullablePromise
  extends Promise<UserInvitation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  inviteToken: () => Promise<String>;
  sentBy: <T = UserPromise>() => T;
  sentTo: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserInvitationConnection {
  pageInfo: PageInfo;
  edges: UserInvitationEdge[];
}

export interface UserInvitationConnectionPromise
  extends Promise<UserInvitationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserInvitationEdge>>() => T;
  aggregate: <T = AggregateUserInvitationPromise>() => T;
}

export interface UserInvitationConnectionSubscription
  extends Promise<AsyncIterator<UserInvitationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserInvitationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserInvitationSubscription>() => T;
}

export interface UserInvitationEdge {
  node: UserInvitation;
  cursor: String;
}

export interface UserInvitationEdgePromise
  extends Promise<UserInvitationEdge>,
    Fragmentable {
  node: <T = UserInvitationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserInvitationEdgeSubscription
  extends Promise<AsyncIterator<UserInvitationEdge>>,
    Fragmentable {
  node: <T = UserInvitationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserInvitation {
  count: Int;
}

export interface AggregateUserInvitationPromise
  extends Promise<AggregateUserInvitation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserInvitationSubscription
  extends Promise<AsyncIterator<AggregateUserInvitation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CompanySubscriptionPayload {
  mutation: MutationType;
  node: Company;
  updatedFields: String[];
  previousValues: CompanyPreviousValues;
}

export interface CompanySubscriptionPayloadPromise
  extends Promise<CompanySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValuesPromise>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface CompanyPreviousValues {
  id: ID_Output;
  name: String;
  companyRole: CompanyRole[];
  country?: String;
  city?: String;
  postalCode?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CompanyPreviousValuesPromise
  extends Promise<CompanyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  companyRole: () => Promise<CompanyRole[]>;
  country: () => Promise<String>;
  city: () => Promise<String>;
  postalCode: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  companyRole: () => Promise<AsyncIterator<CompanyRole[]>>;
  country: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  postalCode: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CompanyInvitationSubscriptionPayload {
  mutation: MutationType;
  node: CompanyInvitation;
  updatedFields: String[];
  previousValues: CompanyInvitationPreviousValues;
}

export interface CompanyInvitationSubscriptionPayloadPromise
  extends Promise<CompanyInvitationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyInvitationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyInvitationPreviousValuesPromise>() => T;
}

export interface CompanyInvitationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanyInvitationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanyInvitationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyInvitationPreviousValuesSubscription>() => T;
}

export interface CompanyInvitationPreviousValues {
  id: ID_Output;
  inviteToken?: String;
  sentTo: String;
  createdAt: DateTimeOutput;
}

export interface CompanyInvitationPreviousValuesPromise
  extends Promise<CompanyInvitationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  inviteToken: () => Promise<String>;
  sentTo: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CompanyInvitationPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyInvitationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  inviteToken: () => Promise<AsyncIterator<String>>;
  sentTo: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  sku?: String;
  price: Int;
  status: ItemStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  sku: () => Promise<String>;
  price: () => Promise<Int>;
  status: () => Promise<ItemStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  sku: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<ItemStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ItemImageSubscriptionPayload {
  mutation: MutationType;
  node: ItemImage;
  updatedFields: String[];
  previousValues: ItemImagePreviousValues;
}

export interface ItemImageSubscriptionPayloadPromise
  extends Promise<ItemImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemImagePreviousValuesPromise>() => T;
}

export interface ItemImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemImagePreviousValuesSubscription>() => T;
}

export interface ItemImagePreviousValues {
  id: ID_Output;
  main?: String;
  thumbnail?: String;
}

export interface ItemImagePreviousValuesPromise
  extends Promise<ItemImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  main: () => Promise<String>;
  thumbnail: () => Promise<String>;
}

export interface ItemImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ItemImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  main: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  status: OrderStatus;
  totalPrice: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<OrderStatus>;
  totalPrice: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<OrderStatus>>;
  totalPrice: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderItemSubscriptionPayload {
  mutation: MutationType;
  node: OrderItem;
  updatedFields: String[];
  previousValues: OrderItemPreviousValues;
}

export interface OrderItemSubscriptionPayloadPromise
  extends Promise<OrderItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderItemPreviousValuesPromise>() => T;
}

export interface OrderItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderItemPreviousValuesSubscription>() => T;
}

export interface OrderItemPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  sku?: String;
  price: Int;
  quantity: Int;
}

export interface OrderItemPreviousValuesPromise
  extends Promise<OrderItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  sku: () => Promise<String>;
  price: () => Promise<Int>;
  quantity: () => Promise<Int>;
}

export interface OrderItemPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  sku: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  firstName: String;
  lastName: String;
  role: UserRole[];
  phone?: String;
  country?: String;
  city?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  verifyEmailToken?: String;
  verifiedEmail: Boolean;
  verifiedPhone: Boolean;
  createdAt: DateTimeOutput;
  lastSeen?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  role: () => Promise<UserRole[]>;
  phone: () => Promise<String>;
  country: () => Promise<String>;
  city: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  verifyEmailToken: () => Promise<String>;
  verifiedEmail: () => Promise<Boolean>;
  verifiedPhone: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  lastSeen: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole[]>>;
  phone: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  verifyEmailToken: () => Promise<AsyncIterator<String>>;
  verifiedEmail: () => Promise<AsyncIterator<Boolean>>;
  verifiedPhone: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastSeen: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserInvitationSubscriptionPayload {
  mutation: MutationType;
  node: UserInvitation;
  updatedFields: String[];
  previousValues: UserInvitationPreviousValues;
}

export interface UserInvitationSubscriptionPayloadPromise
  extends Promise<UserInvitationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserInvitationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserInvitationPreviousValuesPromise>() => T;
}

export interface UserInvitationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserInvitationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserInvitationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserInvitationPreviousValuesSubscription>() => T;
}

export interface UserInvitationPreviousValues {
  id: ID_Output;
  inviteToken?: String;
  sentTo: String;
  createdAt: DateTimeOutput;
}

export interface UserInvitationPreviousValuesPromise
  extends Promise<UserInvitationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  inviteToken: () => Promise<String>;
  sentTo: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserInvitationPreviousValuesSubscription
  extends Promise<AsyncIterator<UserInvitationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  inviteToken: () => Promise<AsyncIterator<String>>;
  sentTo: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "UserRole",
    embedded: false
  },
  {
    name: "CompanyRole",
    embedded: false
  },
  {
    name: "ItemStatus",
    embedded: false
  },
  {
    name: "OrderStatus",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserInvitation",
    embedded: false
  },
  {
    name: "CompanyInvitation",
    embedded: false
  },
  {
    name: "Company",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "ItemImage",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "OrderItem",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
